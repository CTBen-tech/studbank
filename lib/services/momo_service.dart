import 'dart:convert';
import 'package:http/http.dart' as http;

/// A service class to interact with the MoMo API via a Cloudflare Worker proxy.
class MomoService {
  // IMPORTANT: Replace this with the actual URL of your deployed Cloudflare Worker.
  // It should look something like: https://your-worker-name.your-cloudflare-subdomain.workers.dev
  // For your specific setup, it's already defined as:
  final String _baseUrl = 'https://momo-proxy.studbank.workers.dev';

  /// Initiates a Request to Pay (Collection) transaction.
  ///
  /// [amount]: The amount to be requested.
  /// [currency]: The currency code (e.g., "UGX" for Uganda Shillings, "EUR" for sandbox).
  /// [payerMobile]: The mobile number of the customer making the payment (e.g., "256772123456").
  /// [payerMessage]: A message for the payer.
  /// [payeeNote]: A note for the payee (your application).
  ///
  /// The [externalId] is now generated by the Cloudflare Worker to ensure uniqueness
  /// and consistency with MoMo's requirements for X-Reference-Id.
  Future<Map<String, dynamic>> requestToPay({
    required String amount,
    required String currency,
    required String payerMobile,
    String payerMessage = 'Payment for services',
    String payeeNote = 'Services rendered',
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/request-to-pay'),
        headers: {
          'Content-Type': 'application/json',
          // No need for Authorization headers here; your Worker handles it securely.
        },
        body: json.encode({
          'amount': amount,
          'currency': currency,
          // 'externalId' is now generated by the Cloudflare Worker
          'payerMobile': payerMobile,
          'message': payerMessage, // Matches 'message' key in Cloudflare Worker
          'note': payeeNote,       // Matches 'note' key in Cloudflare Worker
        }),
      );

      final responseBody = json.decode(response.body);

      if (response.statusCode == 202) {
        // HTTP 202 Accepted, transaction initiated by Worker
        return {
          'success': true,
          'message': responseBody['message'],
          'referenceId': responseBody['referenceId'], // Worker returns the externalId as referenceId
          'status': responseBody['status'],          // Worker returns initial status (e.g., 'PENDING')
        };
      } else {
        // Handle API errors from your Cloudflare Worker (e.g., 400, 500)
        return {
          'success': false,
          'message': 'Failed to initiate request to pay: ${responseBody['message'] ?? responseBody['error'] ?? 'Unknown Error'}',
          'details': responseBody['details'] ?? {}, // Provides more info from worker if available
          'statusCode': response.statusCode,
        };
      }
    } on http.ClientException catch (e) {
      // Handle network-related errors (e.g., no internet, DNS lookup failure)
      return {
        'success': false,
        'message': 'Network error: Could not connect to the server. Please check your internet connection. (${e.message})',
      };
    } catch (e) {
      // Catch any other unexpected errors during the process
      return {
        'success': false,
        'message': 'An unexpected error occurred: ${e.toString()}',
      };
    }
  }

  /// Initiates a Transfer (Disbursement) transaction.
  ///
  /// [amount]: The amount to be transferred.
  /// [currency]: The currency code.
  /// [payeeMobile]: The mobile number of the recipient (e.g., "256772123456").
  /// [payerMessage]: A message for the payer (your application).
  /// [payeeNote]: A note for the payee.
  ///
  /// The [externalId] is now generated by the Cloudflare Worker.
  Future<Map<String, dynamic>> transfer({
    required String amount,
    required String currency,
    required String payeeMobile,
    String payerMessage = 'Payment for services',
    String payeeNote = 'Services rendered',
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/transfer'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode({
          'amount': amount,
          'currency': currency,
          // 'externalId' is now generated by the Cloudflare Worker
          'payeeMobile': payeeMobile,
          'message': payerMessage, // Matches 'message' key in Cloudflare Worker
          'note': payeeNote,       // Matches 'note' key in Cloudflare Worker
        }),
      );

      final responseBody = json.decode(response.body);

      if (response.statusCode == 202) {
        // HTTP 202 Accepted, transaction initiated by Worker
        return {
          'success': true,
          'message': responseBody['message'],
          'referenceId': responseBody['referenceId'], // Worker returns the externalId as referenceId
          'status': responseBody['status'],          // Worker returns initial status (e.g., 'PENDING')
        };
      } else {
        // Handle API errors from your Cloudflare Worker
        return {
          'success': false,
          'message': 'Failed to initiate transfer: ${responseBody['message'] ?? responseBody['error'] ?? 'Unknown Error'}',
          'details': responseBody['details'] ?? {},
          'statusCode': response.statusCode,
        };
      }
    } on http.ClientException catch (e) {
      return {
        'success': false,
        'message': 'Network error: Could not connect to the server. Please check your internet connection. (${e.message})',
      };
    } catch (e) {
      return {
        'success': false,
        'message': 'An unexpected error occurred: ${e.toString()}',
      };
    }
  }

  /// Fetches the status of a MoMo transaction using the [referenceId] (which is your externalId).
  Future<Map<String, dynamic>> getPaymentStatus(String referenceId) async {
    try {
      final response = await http.get(
        Uri.parse('$_baseUrl/payment-status/$referenceId'),
        headers: {
          'Content-Type': 'application/json',
        },
      );

      final responseBody = json.decode(response.body);

      if (response.statusCode == 200) {
        // HTTP 200 OK, status retrieved successfully
        return {
          'success': true,
          'status': responseBody['status'],
          'financialTransactionId': responseBody['financialTransactionId'],
          'amount': responseBody['amount'],
          'currency': responseBody['currency'],
          'payer': responseBody['payer'],
          'payerMessage': responseBody['payerMessage'],
          'payeeNote': responseBody['payeeNote'],
          // Include other fields from MoMo response as needed, as returned by your Worker
        };
      } else {
        // Handle API errors from your Cloudflare Worker
        return {
          'success': false,
          'message': 'Failed to get payment status: ${responseBody['message'] ?? responseBody['error'] ?? 'Unknown Error'}',
          'details': responseBody['details'] ?? {},
          'statusCode': response.statusCode,
        };
      }
    } on http.ClientException catch (e) {
      return {
        'success': false,
        'message': 'Network error: Could not connect to the server. Please check your internet connection. (${e.message})',
      };
    } catch (e) {
      return {
        'success': false,
        'message': 'An unexpected error occurred: ${e.toString()}',
      };
    }
  }

  /// Fetches the balance of the MoMo account.
  /// This assumes your Cloudflare Worker has an endpoint like '/balance'.
  Future<Map<String, dynamic>> getAccountBalance() async {
    try {
      final response = await http.get(
        Uri.parse('$_baseUrl/balance'), // Assuming your worker exposes this endpoint
        headers: {
          'Content-Type': 'application/json',
        },
      );

      final responseBody = json.decode(response.body);

      if (response.statusCode == 200) {
        return {
          'success': true,
          'availableBalance': responseBody['availableBalance'], // Adjust key based on worker response
          'currency': responseBody['currency'],             // Adjust key based on worker response
        };
      } else {
        return {
          'success': false,
          'message': 'Failed to get account balance: ${responseBody['message'] ?? responseBody['error'] ?? 'Unknown Error'}',
          'details': responseBody['details'] ?? {},
          'statusCode': response.statusCode,
        };
      }
    } on http.ClientException catch (e) {
      return {
        'success': false,
        'message': 'Network error: Could not connect to the server. Please check your internet connection. (${e.message})',
      };
    } catch (e) {
      return {
        'success': false,
        'message': 'An unexpected error occurred: ${e.toString()}',
      };
    }
  }
}